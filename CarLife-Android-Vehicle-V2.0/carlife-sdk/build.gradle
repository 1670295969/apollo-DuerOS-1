apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply plugin: 'com.google.protobuf'

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}
android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        flavorDimensions "versionCode"

        buildConfigField "String", "CARLIFE_SDK_VERSION", CARLIFE_SDK_VERSION

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    android.libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "../../../../libs/${project.getPath().substring(1)}-${variant.buildType.name}.aar"
        }
    }

    //注意，这里的配置是为了去除gradle对library module默认只编译release buildType的限制
//    publishNonDefault true

    buildTypes {
        release {
            // TODO 混淆暂时关闭
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

//    packagingAAR(project, android)

    compileOptions {
        targetCompatibility = JavaVersion.VERSION_1_8
        sourceCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
        languageVersion = "1.5"
        apiVersion = "1.5"
        freeCompilerArgs = ['-Xjvm-default=all']
    }

    lintOptions {
//        checkReleaseBuilds true
        abortOnError false
    }

    buildFeatures{
        viewBinding = true
    }

    aaptOptions {
        noCompress "pcm"
    }

    sourceSets {
        main {
            aidl.srcDirs = ['src/main/java']
            proto {
                srcDir 'src/main/proto' //指定.proto文件路径
            }
        }
    }

}

protobuf {
    protoc {
        // Download from repositories
        if (osdetector.os == "osx") {
            artifact = 'com.google.protobuf:protoc:3.2.0:osx-x86_64'
        } else {
            artifact = 'com.google.protobuf:protoc:3.2.0'
        }
    }
    plugins {
        javalite {
            // The codegen for lite comes as a separate artifact
            if (osdetector.os == "osx") {
                artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0:osx-x86_64'
            } else {
                artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
            }
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
            }
        }
    }
}


dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    api "com.google.protobuf:protobuf-lite:3.0.1"
    implementation  "com.squareup.okhttp3:okhttp:3.14.9"

    api rootProject.ext.dependencies["gson"]

    api rootProject.ext.kotlinx_coroutines["core"]
    api rootProject.ext.kotlinx_coroutines["android"]

}